res = rep(0, N+1)
res[1] = exp(sum(log(1-prevs)))
for (K in 1:(N)){
A = 0
for(k in 1:(K)){
res[K+1]=   res[K+1] + probs[which(probs$probs ==  k), "Freq"]   * choose(N,k) * choose(N-k,N-k) * exp(sum(log(1-taus[sample(1:N^2,(N-K) * k)]))) *
exp(sum(sapply(1:(K-k), function(u){log(1-exp(sum(log(1-taus[sample(1:N^2, k)]))))})))
}
}
res
sum(res)
res = rep(0, N+1)
res[1] = exp(sum(log(1-prevs)))
for (K in 1:(N)){
for(k in 1:(K)){
res[K+1]=   res[K+1] + probs[which(probs$probs ==  k), "Freq"]   * choose(N,k) * choose(N-k,N-k) * exp(sum(log(1-taus[sample(1:N^2,(N-K) * k)]))) *
exp(sum(sapply(1:(K-k), function(u){log(1-exp(sum(log(1-taus[sample(1:N^2, k)]))))})))
}
}
rea
res
sum(res)
infected = rmultinom(1, K, prevs)
K
infected = rmultinom(1, 3, prevs)
infected
infected = rmultinom(1, 4, prevs)
infected
infected = rmultinom(1, 4, prevs)
infected
help(infected)
help("rmultinom")
rmultinom(1, 5, prevs)
sample(1:N, K, prevs, replace = FALSE)
sample(1:N, 3, prevs, replace = FALSE)
infected =sample(1:N, K, prevs, replace = FALSE)
tilde_tau = matrix(rnorm(1, log(tau/(1-tau)), sd=log(tau_relative_var)/2), nrow = N)
tau_relative_var =3
tilde_tau = matrix(rnorm(1, log(tau/(1-tau)), sd=log(tau_relative_var)/2), nrow = N)
tilde_tau
tilde_tau = matrix(rnorm(N^2, log(tau/(1-tau)), sd=log(tau_relative_var)/2), nrow = N)
tilde_tau
tilde_tau
tilde_tau
tilde_tau  = 1/(1+exp(- tilde_tau))
tilde_tau
infected =sample(1:N, K, prevs, replace = FALSE)
K
K=4
infected =sample(1:N, K, prevs, replace = FALSE)
infected
tilde_tau[, -infected]
apply(log(1-tilde_tau[, infected]),1,sum)
exp(apply(log(1-tilde_tau[, infected]),1,sum))
(1-exp(apply(log(1-tilde_tau[, infected]),1,sum))
)
1-exp(apply(log(1-tilde_tau[, infected]),1,sum))
sapply(1-exp(apply(log(1-tilde_tau[, infected]),1,sum)), function(p){rbinom(1,1,p)})
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-tilde_tau[, infected]),1,sum)), function(p){rbinom(1,1,p)}))
}
)
sim
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N-K))))
sim
sim$Freq = sim$Freq/B
sim
probs
probs$Freq[probs$probs == K]
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-tilde_tau[, infected]),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
if (K== 1){
res_tot = res
}else{
res_tot = res_tot + res *  probs$Freq[probs$probs == K]
}
}
tilde_tau = matrix(rnorm(N^2, log(tau/(1-tau)), sd=log(tau_relative_var)/2), nrow = N)
tilde_tau  = 1/(1+exp(- tilde_tau))
tilde_prev = rnorm(N, log(prev/(1-prev)), sd=log(prev_relative_var)/2)
prev_relative_var=2
tilde_prev = rnorm(N, log(prev/(1-prev)), sd=log(prev_relative_var)/2)
tilde_prev  = 1/(1+exp(- tilde_prev))
pi_eff = compute_p_all_levels(N,tilde_prev,tilde_tau)
rho = compute_corr_all_levels(N,tilde_prev,tilde_tau)
probs <- factor(apply(sapply(tilde_prev, function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
res = rep(0, N+1)
res[1] = exp(sum(log(1-prevs)))
probs
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-tilde_tau[, infected]),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
if (K== 1){
res_tot = res
}else{
res_tot = res_tot + res *  probs$Freq[probs$probs == K]
}
}
K=1
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-tilde_tau[, infected]),1,sum)), function(p){rbinom(1,1,p)}))
})
infected = sample(1:N, K, prevs, replace = FALSE)
infected
apply(log(1-tilde_tau[, infected]),1,sum)
as.matrix(tilde_tau[, infected])
infected = sample(1:N, 2, prevs, replace = FALSE)
1-as.matrix(tilde_tau[, infected]
)
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
if (K== 1){
res_tot = res
}else{
res_tot = res_tot + res *  probs$Freq[probs$probs == K]
}
}
res_tot
K
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
if (K== 1){
res_tot = sim
}else{
res_tot$Freq = res_tot$Freq + sim$Freq *  probs$Freq[probs$probs == K]
}
}
res_tot
K=1
probs$Freq[probs$probs == K]
K
infected = sample(1:N, K, prevs, replace = FALSE)
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
})
as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
sim
sim$Freq
sim$Freq *  probs$Freq[probs$probs == K]
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B
if (K== 1){
res_tot = sim*  probs$Freq[probs$probs == K]
}else{
res_tot$Freq = res_tot$Freq + sim$Freq *  probs$Freq[probs$probs == K]
}
}
for (K in 1:N){
sim = sapply(1:B, function(x){
infected = sample(1:N, K, prevs, replace = FALSE)
sum(sapply(1-exp(apply(log(1-as.matrix(tilde_tau[, infected])),1,sum)), function(p){rbinom(1,1,p)}))
})
sim =    as.data.frame(table( factor(K + sim, levels= 0:(N))))
sim$Freq = sim$Freq/B *  probs$Freq[probs$probs == K]
if (K== 1){
res_tot = sim
}else{
res_tot$Freq = res_tot$Freq + sim$Freq
}
}
res_tot$Freq[1] = exp(sum(log(1-prevs)))
res_tot
sum(res_tot)
sum(res_tot$Freq)
es_tot$Freq = res_tot$Freq/sum(res_tot$Freq)
res_tot$Freq = res_tot$Freq/sum(res_tot$Freq)
res_tot
res_tot$Freq
probs <- factor(apply(sapply(prevs, function(x){rbinom(B,1,x)}),1,
function(x){sum(x[-sample(1:N,1)])}, levels= 0:(N-1)))
#### when both prev and tau are vectors
probs <- factor(apply(sapply(prevs, function(x){rbinom(B,1,x)}),1,
function(x){sum(x[-sample(1:N,1)])}), levels= 0:(N-1))
probs
#### when both prev and tau are vectors
probs <- factor(apply(sapply(prevs, function(x){rbinom(B,1,x)}),1,
function(x){sum(x[-sample(1:N,1)])}), levels= 0:(N-1))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
probs
i=3
(1:N)[-i]
taus
taus=tilde_tau
i=1
sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i])
1-exp(sum(log(1- taus[infected,i])))
})
K=1
sample((1:N)[-i], 2, prevs[-i])
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
1-exp(sum(log(1- taus[infected,i])))
sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
1-exp(sum(log(1- taus[infected,i])))
})
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
1-exp(sum(log(1- taus[infected,i])))
}))
}
)
prob
A = mean(prevs)
for(K in 1:(N-1){
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
1-exp(sum(log(1- taus[infected,i])))
}))
})
A = A + prob * probs$Freq[probs$probs == k] * (1-mean(prevs))
}
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
1-exp(sum(log(1- taus[infected,i])))
}))
})
prob
A = mean(prevs)
for(K in 1:(N-1){
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * prevs[infected] * (1-prevs[-infected])
}))
})
A = A + mean(prob) * probs$Freq[probs$probs == k]
A = mean(prevs)
for(K in 1:(N-1)){
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * prevs[infected] * (1-prevs[-infected])
}))
})
A = A + mean(prob) * probs$Freq[probs$probs == k]
}
A
K=2
prob = sapply(1:N, function(i){
mean(sapply(1:B, function(b){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * prevs[infected] * (1-prevs[-infected])
}))
})
K
prob
mean(prob) * probs$Freq[probs$probs == K]
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) *  probs$Freq[probs$probs == K]
})
mean(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) *  probs$Freq[probs$probs == K]
})
}))
test = sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})})
dim(test)
test = apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean)
test
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[probs$probs>0])
probs$Freq[probs$probs>0]
probs
probs$Freq[2:N]
probssum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])* (1-prevs[i]) + prevs[i] <- factor(apply(sapply(prevs, function(x){rbinom(10000,1,x)}),1,function(x)sum(x[1:(N-2)])), levels= 0:(N-2))
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])* (1-prevs[i]) + prevs[i]
prob = sapply(1:N, function(i){
probs <- factor(apply(sapply(prevs[-i], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-1))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])* (1-prevs[i]) + prevs[i]
)})
prob = sapply(1:N, function(i){
probs <- factor(apply(sapply(prevs[-i], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-1))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])* (1-prevs[i]) + prevs[i]
)})
prob
hist(prob)
mean(prob)
compute_p_all_levels <- function(N, prevs, taus, B=10000){
#### when both prev and tau are vectors
prob = sapply(1:N, function(i){
probs <- factor(apply(sapply(prevs[-i], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-1))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i]))))})}),1,mean) *probs$Freq[2:N])* (1-prevs[i]) + prevs[i]
)})
return(mean(prob))
}
p = compute_p_all_levels(N, prevs, taus)
p
prob = sapply(1:N, function(i){
sapply((1:N)[-i], function(j){
probs <- factor(apply(sapply(prevs[-c(i,j)], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-2))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * (1-prevs[i]) * prevs[j] +
(1-exp(sum(log(1- taus[infected,j])))) * (1-prevs[j]) * prevs[i]+
+
(1-prevs[i]) * (1-prevs[j]) * (1-exp(sum(log(1- taus[infected,i])))) * (1-exp(sum(log(1- taus[infected,j]))))
})
}),1,mean) *probs$Freq[2:N])  + prevs[i] * prevs[j]
)})
})
p = compute_p_all_levels(N, prevs, taus)
p
compute_corr_all_levels <- function(N, prevs, taus, p = NULL, B=10000){
#### Have to be way smarter than this...
if (is.null(p)){
p = compute_p_all_levels(N, prevs, taus)
}
probs <- factor(apply(sapply(prevs, function(x){rbinom(B,1,x)}),1,function(x)sum(x[1:(N-2)])), levels= 0:(N-2))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
prob = sapply(1:N, function(i){
sapply((1:N)[-i], function(j){
probs <- factor(apply(sapply(prevs[-c(i,j)], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-2))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-1), function(K){
infected = sample((1:N)[-i], K, prevs[-i], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * (1-prevs[i]) * prevs[j] +
(1-exp(sum(log(1- taus[infected,j])))) * (1-prevs[j]) * prevs[i]+
+
(1-prevs[i]) * (1-prevs[j]) * (1-exp(sum(log(1- taus[infected,i])))) * (1-exp(sum(log(1- taus[infected,j]))))
})
}),1,mean) *probs$Freq[2:N])  + prevs[i] * prevs[j]
)})
})
return( mean(prob -p^2))
#   A = 0
#   Bb = probs[which(probs$probs ==  0), "Freq"]  *
#     mean(sapply(1:10000, function(b){(1-exp(sum(log(1-taus[sample(1:length(taus),1)])))) *  exp(sum(log(1-taus[sample(1:length(taus),N-1)])))}))
#   for (K in 1:(N-2)){
#     A = 0
#     Bb = 0
#     for(k in 0:K){
#       if (k>0){
#         Bb = Bb+ probs[which(probs$probs ==  k), "Freq"]  *
#           mean(sapply(1:1000, function(b){exp(sum(log(1-taus[sample(1:N^2,(N-2-K) * (k+1))]))) * exp(sum(sapply(1:(K+1-k), function(u){log(1-exp(sum(log(taus[sample(1:N^2, k+1)]))))})))}))
#         A =  A + probs[which(probs$probs ==  k), "Freq"]   *
#           mean(sapply(1:1000, function(b){exp(sum(log(1-taus[sample(1:N^2,(N-2-K) * k)]))) * exp(sum(sapply(1:(K-k+2), function(u){log(1-exp(sum(log(taus[sample(1:N^2, k)]))))})))}))
#
#       }else{
#         Bb = Bb + probs[which(probs$probs ==  0), "Freq"]  *
#           mean(sapply(1:10000, function(b){(1-exp(sum(log(1-taus[sample(1:length(taus),1)])))) *  exp(sum(log(1-taus[sample(1:length(taus),N-2)])))}))
#       }
#
#     }
#   }
#   p0 =  mean(sapply(1:1000, function(x){exp(sum(log(1-prevs[sample(1:N, 2)])))}))
#   p1 =  mean(sapply(1:1000, function(x){ (1-prevs[sample(1:N, 1)]) *(prevs[sample(1:N, 1)]) }))
#   p2 =  mean(sapply(1:1000, function(x){exp(sum(log(prevs[sample(1:N, 2)])))}))
#   return((p0 * A + 2*p1 * B + p2- p^2)/(p*(1-p)))
}
corr  = compute_corr_all_levels(N, prevs, taus)
corr
compute_corr_all_levels <- function(N, prevs, taus, p = NULL, B=10000){
#### Have to be way smarter than this...
if (is.null(p)){
p = compute_p_all_levels(N, prevs, taus)
}
probs <- factor(apply(sapply(prevs, function(x){rbinom(B,1,x)}),1,function(x)sum(x[1:(N-2)])), levels= 0:(N-2))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
prob = sapply(1:N, function(i){
sapply((1:N)[-i], function(j){
probs <- factor(apply(sapply(prevs[-c(i,j)], function(x){rbinom(B,1,x)}),1,sum), levels= 0:(N-2))
probs = as.data.frame(table(probs))
probs$Freq = probs$Freq/B
return(
sum(apply(sapply(1:B, function(b){
sapply(1:(N-2), function(K){
infected = sample((1:N)[-c(i,j)], K, prevs[-c(i,j)], replace=FALSE)
(1-exp(sum(log(1- taus[infected,i])))) * (1-prevs[i]) * prevs[j] +
(1-exp(sum(log(1- taus[infected,j])))) * (1-prevs[j]) * prevs[i]+
+
(1-prevs[i]) * (1-prevs[j]) * (1-exp(sum(log(1- taus[infected,i])))) * (1-exp(sum(log(1- taus[infected,j]))))
})
}),1,mean) *probs$Freq[2:(N-1)])  + prevs[i] * prevs[j]
)})
})
return( mean(prob -p^2))
#   A = 0
#   Bb = probs[which(probs$probs ==  0), "Freq"]  *
#     mean(sapply(1:10000, function(b){(1-exp(sum(log(1-taus[sample(1:length(taus),1)])))) *  exp(sum(log(1-taus[sample(1:length(taus),N-1)])))}))
#   for (K in 1:(N-2)){
#     A = 0
#     Bb = 0
#     for(k in 0:K){
#       if (k>0){
#         Bb = Bb+ probs[which(probs$probs ==  k), "Freq"]  *
#           mean(sapply(1:1000, function(b){exp(sum(log(1-taus[sample(1:N^2,(N-2-K) * (k+1))]))) * exp(sum(sapply(1:(K+1-k), function(u){log(1-exp(sum(log(taus[sample(1:N^2, k+1)]))))})))}))
#         A =  A + probs[which(probs$probs ==  k), "Freq"]   *
#           mean(sapply(1:1000, function(b){exp(sum(log(1-taus[sample(1:N^2,(N-2-K) * k)]))) * exp(sum(sapply(1:(K-k+2), function(u){log(1-exp(sum(log(taus[sample(1:N^2, k)]))))})))}))
#
#       }else{
#         Bb = Bb + probs[which(probs$probs ==  0), "Freq"]  *
#           mean(sapply(1:10000, function(b){(1-exp(sum(log(1-taus[sample(1:length(taus),1)])))) *  exp(sum(log(1-taus[sample(1:length(taus),N-2)])))}))
#       }
#
#     }
#   }
#   p0 =  mean(sapply(1:1000, function(x){exp(sum(log(1-prevs[sample(1:N, 2)])))}))
#   p1 =  mean(sapply(1:1000, function(x){ (1-prevs[sample(1:N, 1)]) *(prevs[sample(1:N, 1)]) }))
#   p2 =  mean(sapply(1:1000, function(x){exp(sum(log(prevs[sample(1:N, 2)])))}))
#   return((p0 * A + 2*p1 * B + p2- p^2)/(p*(1-p)))
}
corr  = compute_corr_all_levels(N, prevs, taus)
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
Sys.setenv(MAKEFLAGS = "-j4") # four cores used
install.packages(c("Rcpp", "RcppEigen", "RcppParallel", "StanHeaders"), type = "source")
R --version
R
which(R)
R.version.string
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS += -O3 -mtune=native -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = FALSE)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(DOWNLOAD_STATIC_LIBV8 = 1) # only necessary for Linux without the nodejs library / headers
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
example(stan_model, package = "rstan", run.dontrun = TRUE)
